From f847b3402e2cf9eef617c1940a8dc44d77730611 Mon Sep 17 00:00:00 2001
From: Simon Zolin <stsaz@yandex.ru>
Date: Mon, 20 Jun 2016 19:49:09 +0300
Subject: [PATCH 2/3] enable SSE2

---
 MACLib/NNFilter.cpp | 35 +++++++++++++++++++----------------
 MACLib/NNFilter.h   | 21 ++++++++++++---------
 2 files changed, 31 insertions(+), 25 deletions(-)

diff --git a/MACLib/NNFilter.cpp b/MACLib/NNFilter.cpp
index 34ca020..769ed49 100644
--- a/MACLib/NNFilter.cpp
+++ b/MACLib/NNFilter.cpp
@@ -1,9 +1,6 @@
 #include "All.h"
 #include "GlobalFunctions.h"
 #include "NNFilter.h"
-#ifdef ENABLE_SSE_ASSEMBLY
-	#include <emmintrin.h> // SSE 2
-#endif
 
 namespace APE
 {
@@ -49,22 +46,24 @@ int CNNFilter::Compress(int nInput)
     // figure a dot product
     int nDotProduct;
 #ifdef ENABLE_SSE_ASSEMBLY
-    if (m_bSSEAvailable)
+    // if (m_bSSEAvailable)
        nDotProduct = CalculateDotProductSSE(&m_rbInput[-m_nOrder], &m_paryM[0], m_nOrder);
-    else
-#endif
+#else
+    // else
         nDotProduct = CalculateDotProduct(&m_rbInput[-m_nOrder], &m_paryM[0], m_nOrder);
+#endif
 
     // calculate the output
     int nOutput = nInput - ((nDotProduct + (1 << (m_nShift - 1))) >> m_nShift);
 
     // adapt
 #ifdef ENABLE_SSE_ASSEMBLY
-    if (m_bSSEAvailable)
+    // if (m_bSSEAvailable)
         AdaptSSE(&m_paryM[0], &m_rbDeltaM[-m_nOrder], nOutput, m_nOrder);
-    else
-#endif
+#else
+    // else
         Adapt(&m_paryM[0], &m_rbDeltaM[-m_nOrder], nOutput, m_nOrder);
+#endif
 
     int nTempABS = abs(nInput);
 
@@ -95,19 +94,21 @@ int CNNFilter::Decompress(int nInput)
     // figure a dot product
     int nDotProduct;
 #ifdef ENABLE_SSE_ASSEMBLY
-    if (m_bSSEAvailable)
+    // if (m_bSSEAvailable)
         nDotProduct = CalculateDotProductSSE(&m_rbInput[-m_nOrder], &m_paryM[0], m_nOrder);
-    else
-#endif
+#else
+    // else
 		nDotProduct = CalculateDotProduct(&m_rbInput[-m_nOrder], &m_paryM[0], m_nOrder);
+#endif
 
     // adapt
 #ifdef ENABLE_SSE_ASSEMBLY
-    if (m_bSSEAvailable)
+    // if (m_bSSEAvailable)
         AdaptSSE(&m_paryM[0], &m_rbDeltaM[-m_nOrder], nInput, m_nOrder);
-    else
+#else
+    // else
+        Adapt(&m_paryM[0], &m_rbDeltaM[-m_nOrder], nInput, m_nOrder);
 #endif
-		Adapt(&m_paryM[0], &m_rbDeltaM[-m_nOrder], nInput, m_nOrder);
 
     // store the output value
     int nOutput = nInput + ((nDotProduct + (1 << (m_nShift - 1))) >> m_nShift);
@@ -148,6 +149,7 @@ int CNNFilter::Decompress(int nInput)
     return nOutput;
 }
 
+#ifndef ENABLE_SSE_ASSEMBLY
 void CNNFilter::Adapt(short * pM, short * pAdapt, int nDirection, int nOrder)
 {
     nOrder >>= 4;
@@ -180,6 +182,7 @@ int CNNFilter::CalculateDotProduct(short * pA, short * pB, int nOrder)
     
     return nDotProduct;
 }
+#endif
 
 #ifdef ENABLE_SSE_ASSEMBLY
 
@@ -227,7 +230,7 @@ int CNNFilter::CalculateDotProductSSE(short * pA, short * pB, int nOrder)
 
     // build output
     int nDotProduct = 0;
-#ifdef PLATFORM_LINUX
+#ifndef _MSC_VER
     __oword my__oword;
     my__oword.m128i = sseSum;
     nDotProduct = my__oword.m128i_i32[0] + my__oword.m128i_i32[1] + my__oword.m128i_i32[2] + my__oword.m128i_i32[3];
diff --git a/MACLib/NNFilter.h b/MACLib/NNFilter.h
index ca4c8b3..3678098 100644
--- a/MACLib/NNFilter.h
+++ b/MACLib/NNFilter.h
@@ -4,6 +4,9 @@ namespace APE
 {
 
 #include "RollBuffer.h"
+#ifdef ENABLE_SSE_ASSEMBLY
+    #include <emmintrin.h> // SSE 2
+#endif
 #define NN_WINDOW_ELEMENTS    512
 
 class CNNFilter
@@ -41,17 +44,17 @@ private:
 		__forceinline int CalculateDotProductSSE(short * pA, short * pB, int nOrder);
 	#endif
     
-    #if defined (PLATFORM_LINUX) && defined(ENABLE_SSE_ASSEMBLY)
+    #if !defined (_MSC_VER) && defined(ENABLE_SSE_ASSEMBLY)
         typedef union __attribute__ ((aligned (16))) __oword {
             __m128i m128i;
-            __int8 m128i_i8[16];
-            __int16 m128i_i16[8];
-            __int32 m128i_i32[4];
-            __int64 m128i_i64[2];
-            unsigned __int8 m128i_u8[16];
-            unsigned __int16 m128i_u16[8];
-            unsigned __int32 m128i_u32[4];
-            unsigned __int64 m128i_u64[2];
+            int8_t m128i_i8[16];
+            int16_t m128i_i16[8];
+            int32_t m128i_i32[4];
+            int64_t m128i_i64[2];
+            uint8_t m128i_u8[16];
+            uint16_t m128i_u16[8];
+            uint32_t m128i_u32[4];
+            uint64_t m128i_u64[2];
         } __oword;
     #endif
 };
-- 
2.4.3

